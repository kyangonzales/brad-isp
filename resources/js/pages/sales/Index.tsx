import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import AppLayout from '@/layouts/app-layout';
import { highlightText } from '@/lib/highlightText';
import { formatDateTime } from '@/lib/utils';
import { Head } from '@inertiajs/react';
import axios from 'axios';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { FileSpreadsheet, FileText, Search } from 'lucide-react';
import { useEffect, useState } from 'react';
import * as XLSX from 'xlsx';
interface Sale {
    id: number;
    date: string;
    fullname: string;
    branch: string;
    price: number;
}

export default function Index() {
    const breadcrumbs = [{ title: 'Sales List', href: '/sales' }];
    const [branch, setBranch] = useState<string>('All');
    const [sales, setSales] = useState<Sale[]>([]);
    const [loading, setLoading] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');

    // Filter sales by date range
    const filteredSales = sales.filter((sale) => {
        const matchesDate = (!startDate || sale.date >= startDate) && (!endDate || sale.date <= endDate);

        const matchesSearch =
            sale.fullname.toLowerCase().includes(searchTerm.toLowerCase()) ||
            formatDateTime(sale.date).toLowerCase().includes(searchTerm.toLowerCase());

        const matchesBranch = branch === 'All' || sale.branch === branch; // ‚úÖ branch condition

        return matchesDate && matchesSearch && matchesBranch;
    });

    useEffect(() => {
        const fetchSales = async () => {
            setLoading(true);
            try {
                const response = await axios.get('/salesResult', {
                    params: {
                        from: startDate || undefined,
                        to: endDate || undefined,
                    },
                });

                // üëá depende kung paano ka nag-return sa controller
                const records = response.data.records || response.data;

                setSales(
                    records.map((item: any) => ({
                        id: item.id,
                        date: item.created_at,
                        fullname: item.customer?.fullname || 'N/A', // ‚úÖ ito ang tamang key
                        branch: item.customer?.branch || 'N/A',
                        price: parseFloat(item.price),
                    })),
                );
            } catch (error) {
                console.error('Error fetching sales:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchSales();
    }, [startDate, endDate]);

    // Compute total sales
    const totalSales = filteredSales.reduce((sum, sale) => sum + sale.price, 0);

    const handleExportPDF = () => {
        const doc = new jsPDF();

        // üè¢ Company Name & Title
        doc.setFontSize(18);
        doc.text('ULYCES ISP', 14, 15);
        doc.setFontSize(14);
        doc.text('Sales Report', 14, 25);

        // üóìÔ∏è Date Range Info
        doc.setFontSize(11);
        const rangeText = startDate && endDate ? `Period: ${startDate} to ${endDate}` : 'Period: All Records';
        doc.text(rangeText, 14, 33);

        // üìä Table
        const result = autoTable(doc, {
            startY: 40,
            head: [['Date', 'Customer', 'Price']],
            body: filteredSales.map((s) => [s.date, s.fullname, `‚Ç±${s.price.toLocaleString()}`]),
            foot: [['', 'Total', `‚Ç±${totalSales.toLocaleString()}`]],
            styles: {
                fontSize: 10,
                halign: 'center',
            },
            headStyles: {
                fillColor: [41, 128, 185],
                textColor: 255,
                halign: 'center',
            },
            footStyles: {
                fillColor: [230, 230, 230],
                textColor: [0, 0, 0],
                fontStyle: 'bold',
            },
        });

        // ‚úÖ Final Y fix (universal)
        const finalY = (result as any)?.cursor?.y || (result as any)?.finalY || 40;

        // üìå Footer
        doc.setFontSize(9);
        doc.setTextColor(100);
        doc.text('Generated by ULYCES ISP Sales System', 14, finalY - 2);

        doc.save(`ULYCES_Sales_Report_${startDate || 'all'}_${endDate || 'all'}.pdf`);
    };

    // ‚úÖ Export to Excel (Professional Sheet)
    const handleExportExcel = () => {
        // Prepare data
        const data = filteredSales.map((s) => ({
            Date: s.date,
            Customer: s.fullname,
            Price: s.price,
        }));

        // Add total row
        data.push({ Date: '', Customer: 'Total', Price: totalSales });

        // ‚úÖ Create worksheet (no origin here!)
        const ws = XLSX.utils.json_to_sheet(data);

        // üè¢ Add company header at the top
        XLSX.utils.sheet_add_aoa(
            ws,
            [
                ['ULYCES ISP'],
                ['Sales Report'],
                [startDate && endDate ? `Period: ${startDate} to ${endDate}` : 'Period: All Records'],
                [], // blank row before data
            ],
            { origin: 'A1' },
        );

        // üìä Auto width for columns
        const colWidths = [
            { wch: 15 }, // Date
            { wch: 30 }, // Customer
            { wch: 15 }, // Price
        ];
        ws['!cols'] = colWidths;

        // üìò Workbook setup
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Sales Report');

        XLSX.writeFile(wb, `ULYCES_Sales_Report_${startDate || 'all'}_${endDate || 'all'}.xlsx`);
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Sales List" />

            {/* üîπ Filter + Total + Export */}
            <Card className="mx-6 mt-4 mb-6">
                <CardHeader className="border-b pb-4">
                    <CardTitle className="text-3xl font-extrabold tracking-wide" style={{ color: '#1C3694', fontFamily: 'Poppins, sans-serif' }}>
                        Sales Overview
                    </CardTitle>
                    <p className="mt-1 text-sm text-gray-500">
                        {' '}
                        View and track your sales performance, revenue trends, and transaction history in one place.
                    </p>
                </CardHeader>
                <CardContent className="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
                    <div className="flex flex-col gap-2 sm:flex-row sm:items-end sm:gap-4">
                        {/* Search */}
                        <div className="relative flex flex-col gap-1 sm:w-full">
                            <Label htmlFor="search">Search</Label>
                            <div className="relative w-full">
                                <Search className="text-muted-foreground absolute top-2.5 left-3 h-5 w-5" />
                                <Input
                                    id="search"
                                    type="text"
                                    placeholder="Search customer or date..."
                                    className="pl-10"
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                />
                            </div>
                        </div>
                        {/* Branch */}
                        <div className="flex flex-col gap-1 sm:w-1/2">
                            <Label htmlFor="branch">Branch</Label>
                            <Select value={branch} onValueChange={setBranch}>
                                <SelectTrigger className="w-full">
                                    <SelectValue placeholder="All Branches" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="All">All Branches</SelectItem>
                                    <SelectItem value="General Tinio">General Tinio</SelectItem>
                                    <SelectItem value="Pe√±aranda">Pe√±aranda</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                        {/* Date Range */}
                        <div className="flex flex-col gap-2 sm:flex-row sm:items-end sm:gap-2">
                            <div className="flex flex-col gap-1">
                                <Label htmlFor="startDate">Start Date</Label>
                                <Input id="startDate" type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
                            </div>
                            <div className="flex flex-col gap-1">
                                <Label htmlFor="endDate">End Date</Label>
                                <Input id="endDate" type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
                            </div>
                        </div>
                    </div>

                    {/* üí∞ Total + Export */}
                    <div className="flex items-center gap-4">
                        <div className="text-right">
                            <p className="text-xl text-gray-500">Total Sales</p>
                            <p className="text-5xl font-bold text-blue-600">‚Ç±{totalSales.toLocaleString()}</p>
                        </div>

                        <div className="flex gap-2">
                            <Button onClick={handleExportPDF} className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700">
                                <FileText size={18} />
                                PDF
                            </Button>
                            <Button onClick={handleExportExcel} className="flex items-center gap-2 bg-green-600 hover:bg-green-700">
                                <FileSpreadsheet size={18} />
                                Excel
                            </Button>
                        </div>
                    </div>
                </CardContent>
            </Card>

            {/* üîπ Sales Table */}
            <Card className="mx-6 mb-6">
                <CardHeader>
                    <CardTitle>Sales Records</CardTitle>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>No.</TableHead>
                                <TableHead>Date</TableHead>
                                <TableHead>Customer</TableHead>
                                <TableHead className="text-right">Price</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {loading ? (
                                <TableRow>
                                    <TableCell colSpan={3} className="text-center">
                                        Loading sales...
                                    </TableCell>
                                </TableRow>
                            ) : filteredSales.length > 0 ? (
                                filteredSales.map((sale, index) => (
                                    <TableRow key={sale.id}>
                                        <TableCell>{index + 1 + '.'}</TableCell>
                                        <TableCell>{highlightText(formatDateTime(sale.date), searchTerm)}</TableCell>
                                        <TableCell>{highlightText(sale.fullname, searchTerm)}</TableCell>
                                        <TableCell className="text-right">‚Ç±{highlightText(sale.price.toLocaleString(), searchTerm)}</TableCell>
                                    </TableRow>
                                ))
                            ) : (
                                <TableRow>
                                    <TableCell colSpan={3} className="text-center">
                                        No sales found for this range.
                                    </TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
        </AppLayout>
    );
}
